import java.util.regex.Pattern

plugins {
    id 'java'
    id 'checkstyle'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = 'dev.felnull'

checkstyle {
    toolVersion = "10.12.2"
}

configurations {
    implementation.extendsFrom shadowIn
}

repositories {
    maven {
        name = 'felnull maven'
        url = 'https://maven.felnull.dev/'
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "xenondevs"
        url = "https://repo.xenondevs.xyz/releases"
    }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
    maven {
        name = 'enginehub-maven'
        url = 'https://maven.enginehub.org/repo/'
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT"
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.15'

    shadowIn "xyz.xenondevs.invui:invui:1.15"
    shadowIn "net.kunmc.lab:ikisugi-logger:1.3"
    shadowIn "dev.felnull:felnull-java-library:1.75"
    shadowIn "dev.jorel:commandapi-bukkit-shade:9.1.0"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowIn]
    archiveClassifier.set("")

    def relocatedPath = 'dev.felnull.shortlifeplugin.include'
    relocate 'net.kunmc.lab.ikisugilogger', relocatedPath + '.net.kunmc.lab.ikisugilogger'
    relocate 'xyz.xenondevs', relocatedPath + '.xyz.xenondevs'
    relocate 'org.jetbrains.annotations', relocatedPath + '.org.jetbrains.annotations'
    relocate 'org.intellij.lang.annotations', relocatedPath + '.org.intellij.lang.annotations'
    relocate 'dev.felnull.fnjl', relocatedPath + '.dev.felnull.fnjl'
    relocate('dev.jorel.commandapi', relocatedPath + '.dev.jorel.commandapi')
}

tasks.named("build") {
    dependsOn(tasks.named("shadowJar"))
}

// ビルドしたJarファイルをサーバーのプラグインフォルダへコピー
tasks.register('copyJar', Copy) {
    from(layout.buildDirectory.dir("libs/ShortLifePlugin-${version}.jar"))
    into(".run/plugins")
    rename("ShortLifePlugin-${Pattern.quote(version)}.jar", "ShortLifePlugin.jar")
}